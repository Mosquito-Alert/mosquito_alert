# Generated by Django 3.2.25 on 2025-03-26 08:29

from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


def populate_result_source(apps, schema_editor):
    IdentificationTask = apps.get_model('tigacrafting', 'IdentificationTask')

    from tigacrafting.models import IdentificationTask as OriginalIdentificationTask

    IdentificationTask.objects.filter(
        ~models.Q(
            status__in=[
                OriginalIdentificationTask.Status.OPEN,
                OriginalIdentificationTask.Status.ARCHIVED
            ]
        ) | models.Q(
            status=OriginalIdentificationTask.Status.ARCHIVED,
            confidence__gt=Decimal('0')
        )
    ).update(
        result_source=OriginalIdentificationTask.ResultSource.EXPERT
    )

class Migration(migrations.Migration):

    dependencies = [
        ('tigaserver_app', '0082_remove_iascore'),
        ('tigacrafting', '0032_rename_revision_type_identificationtask_review_type'),
    ]

    operations = [
        migrations.AddField(
            model_name='identificationtask',
            name='result_source',
            field=models.CharField(blank=True, choices=[('expert', 'Expert'), ('ai', 'Artificial Intelligence')], editable=False, max_length=8, null=True),
        ),
        migrations.RunPython(populate_result_source, migrations.RunPython.noop),
        migrations.AddField(
            model_name='identificationtask',
            name='pred_insect_confidence',
            field=models.FloatField(blank=True, editable=False, help_text='The insect confidence from the predictions.', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.CreateModel(
            name='PhotoPrediction',
            fields=[
                ('photo', models.OneToOneField(help_text='Photo to which the score refers to', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='prediction', serialize=False, to='tigaserver_app.photo')),
                ('classifier_version', models.CharField(choices=[('v2023.1', 'v2023.1'), ('v2024.1', 'v2024.1'), ('v2025.1', 'v2025.1'), ('v2025.2', 'v2025.2'), ('v2025.3', 'v2025.3'), ('v2025.4', 'v2025.4')], max_length=16)),
                ('is_decisive', models.BooleanField(default=False, help_text='Indicates if this prediction can close the identification task.')),
                ('insect_confidence', models.FloatField(help_text='Insect confidence', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('predicted_class', models.CharField(null=True, choices=[('ae_albopictus', 'Aedes albopictus'), ('ae_aegypti', 'Aedes aegypti'), ('ae_japonicus', 'Aedes japonicus'), ('ae_koreicus', 'Aedes koreicus'), ('culex', 'Culex (s.p)'), ('anopheles', 'Anopheles (s.p.)'), ('culiseta', 'Culiseta (s.p.)'), ('other_species', 'Ohter species'), ('not_sure', 'Unidentifiable')], default='not_sure', max_length=32)),
                ('threshold_deviation', models.FloatField(validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('x_tl', models.PositiveIntegerField(help_text='photo bounding box coordinates top left x')),
                ('x_br', models.PositiveIntegerField(help_text='photo bounding box coordinates bottom right x')),
                ('y_tl', models.PositiveIntegerField(help_text='photo bounding box coordinates top left y')),
                ('y_br', models.PositiveIntegerField(help_text='photo bounding box coordinates bottom right y')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('ae_albopictus_score', models.FloatField(help_text='Score value for the class Aedes albopictus', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ae_aegypti_score', models.FloatField(help_text='Score value for the class Aedes aegypti', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ae_japonicus_score', models.FloatField(help_text='Score value for the class Aedes japonicus', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ae_koreicus_score', models.FloatField(help_text='Score value for the class Aedes koreicus', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('culex_score', models.FloatField(help_text='Score value for the class Culex (s.p)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('anopheles_score', models.FloatField(help_text='Score value for the class Anopheles (s.p.)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('culiseta_score', models.FloatField(help_text='Score value for the class Culiseta (s.p.)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('other_species_score', models.FloatField(help_text='Score value for the class Ohter species', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('not_sure_score', models.FloatField(help_text='Score value for the class Unidentifiable', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('identification_task', models.ForeignKey(help_text='Identification task to which the photo belongs', on_delete=django.db.models.deletion.CASCADE, related_name='photo_predictions', to='tigacrafting.identificationtask')),
                ('taxon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tigacrafting.taxon')),
            ],
        ),
        migrations.AddConstraint(
            model_name='photoprediction',
            constraint=models.CheckConstraint(check=models.Q(('x_tl__lte', django.db.models.expressions.F('x_br'))), name='x_tl_less_equal_x_br'),
        ),
        migrations.AddConstraint(
            model_name='photoprediction',
            constraint=models.CheckConstraint(check=models.Q(('y_tl__lte', django.db.models.expressions.F('y_br'))), name='y_tl_less_equal_y_br'),
        ),
        migrations.AddConstraint(
            model_name='photoprediction',
            constraint=models.UniqueConstraint(condition=models.Q(('is_decisive', True)), fields=('identification_task',), name='unique_final_prediction_per_task'),
        ),
        migrations.AddConstraint(
            model_name='photoprediction',
            constraint=models.UniqueConstraint(fields=('photo', 'identification_task'), name='unique_photo_identification_task'),
        ),
    ]
