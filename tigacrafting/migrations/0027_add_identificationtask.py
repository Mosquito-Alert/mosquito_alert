# Generated by Django 3.2.25 on 2025-01-24 11:04
from decimal import Decimal

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion



def set_expertreportannotation_confidence(apps, schema_editor):
    ExpertReportAnnotation = apps.get_model('tigacrafting', 'ExpertReportAnnotation')

    ExpertReportAnnotation.objects.filter(validation_value=2).update(confidence=1.0)
    ExpertReportAnnotation.objects.filter(validation_value=1).update(confidence=0.75)

    from tigacrafting.models import Taxon

    # Fetch annotations where validation_value is not 1 or 2 and taxon exists
    annotations_with_taxon = ExpertReportAnnotation.objects.exclude(validation_value__in=[1, 2]).filter(taxon__isnull=False)

    # Update confidence for taxon.rank < SPECIES_COMPLEX
    annotations_with_taxon.filter(taxon__rank__lt=Taxon.TaxonomicRank.SPECIES_COMPLEX).update(confidence=1.0)

    # Update confidence for taxon.rank >= SPECIES_COMPLEX
    annotations_with_taxon.filter(taxon__rank__gte=Taxon.TaxonomicRank.SPECIES_COMPLEX).update(confidence=0.75)

def create_identification_tasks(apps, schema_editor):
    IdentificationTask = apps.get_model('tigacrafting', 'IdentificationTask')

    Report = apps.get_model('tigaserver_app', 'Report')
    Photo = apps.get_model('tigaserver_app', 'Photo')

    report_qs = Report.objects.filter(type='adult').annotate(
        photo_exist=models.Exists(
            Photo.objects.filter(
                report=models.OuterRef('pk')
            )
        ),
        first_photo_pk=Photo.objects.filter(
            report=models.OuterRef('pk')
        ).values('pk')[:1]
    ).filter(
        photo_exist=True
    )

    tasks_to_create = []
    for report in report_qs.iterator():
        tasks_to_create.append(
            IdentificationTask(
                report=report,
                photo_id=report.first_photo_pk,
                created_at=report.server_upload_time
            )
        )
    IdentificationTask.objects.bulk_create(
        tasks_to_create,
        batch_size=2000
    )


class Migration(migrations.Migration):

    dependencies = [
        ('tigacrafting', '0026_populate_expertreportannotation_taxon'),
    ]

    operations = [
        migrations.AddField(
            model_name='expertreportannotation',
            name='confidence',
            field=models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.RunPython(set_expertreportannotation_confidence, migrations.RunPython.noop),
        migrations.AddConstraint(
            model_name='expertreportannotation',
            constraint=models.CheckConstraint(check=models.Q(('confidence__gte', 0), ('confidence__lte', 1)), name='expertreportannotation_confidence_between_0_and_1'),
        ),
        migrations.CreateModel(
            name='IdentificationTask',
            fields=[
                ('report', models.OneToOneField(limit_choices_to={'type': 'adult'}, on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='identification_task', serialize=False, to='tigaserver_app.report')),
                ('status', models.CharField(choices=[('open', 'Open'), ('conflict', 'Conflict'), ('flagged', 'Flagged'), ('review', 'Review'), ('done', 'Done'), ('archived', 'Archived')], db_index=True, default='open', max_length=16)),
                ('assignees', models.ManyToManyField(through='tigacrafting.ExpertReportAnnotation', to=settings.AUTH_USER_MODEL)),
                ('is_safe', models.BooleanField(default=False, editable=False, help_text='Indicates if the content is safe for publication.')),
                ('public_note', models.TextField(blank=True, editable=False, null=True)),
                ('message_for_user', models.TextField(blank=True, editable=False, null=True)),
                ('total_annotations', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('total_finished_annotations', models.PositiveSmallIntegerField(default=0, editable=False)),
                ('confidence', models.DecimalField(decimal_places=6, default=Decimal('0'), editable=False, max_digits=7, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('1'))])),
                ('agreement', models.FloatField(default=0, editable=False, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('uncertainty', models.FloatField(default=1.0, editable=False, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('reviewed_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('revision_type', models.CharField(blank=True, choices=[('agree', 'Agreed with experts'), ('overwrite', 'Overwritten')], default=None, editable=False, max_length=16, null=True)),
                ('photo', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='identification_tasks', to='tigaserver_app.photo')),
                ('taxon', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.PROTECT, to='tigacrafting.taxon')),
            ],
        ),
        migrations.RunPython(create_identification_tasks, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='identificationtask',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AddField(
            model_name='expertreportannotation',
            name='identification_task',
            field=models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expert_report_annotations', to='tigacrafting.identificationtask'),
        ),
        migrations.AddConstraint(
            model_name='identificationtask',
            constraint=models.CheckConstraint(check=models.Q(('total_finished_annotations__lte', django.db.models.expressions.F('total_annotations'))), name='total_finished_annotations_lte_total_annotations'),
        ),
        migrations.AddConstraint(
            model_name='identificationtask',
            constraint=models.CheckConstraint(check=models.Q(('confidence__range', (Decimal('0'), Decimal('1')))), name='tigacrafting_identificationtask_confidence_between_0_and_1'),
        ),
        migrations.AddConstraint(
            model_name='identificationtask',
            constraint=models.CheckConstraint(check=models.Q(('uncertainty__range', (0, 1))), name='tigacrafting_identificationtask_uncertainty_between_0_and_1'),
        ),
        migrations.AddConstraint(
            model_name='identificationtask',
            constraint=models.CheckConstraint(check=models.Q(('agreement__range', (0, 1))), name='tigacrafting_identificationtask_agreement_between_0_and_1'),
        ),
    ]
