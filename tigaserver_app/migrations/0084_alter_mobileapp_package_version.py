# Generated by Django 3.2.25 on 2025-08-22 08:18

from django.db import migrations
import django.core.validators
import re
import semantic_version
import semantic_version.django_fields
from semantic_version import Version


def force_semantic_version(apps, schema_editor):
    MobileApp = apps.get_model('tigaserver_app', 'MobileApp')

    obj_to_update = []
    for mobile_app in MobileApp.objects.iterator():
        if not semantic_version.validate(mobile_app.package_version):
            if '.' in mobile_app.package_version:
                mobile_app.package_version = Version.coerce(mobile_app.package_version)
            else:
                # NOTE: this must be the same as in Report.save when doing the MobileApp.objects.get_or_create
                mobile_app.package_version = Version(
                    major=0,
                    minor=int(mobile_app.package_version),
                    patch=0,
                    build=('legacy',)
                )
            obj_to_update.append(mobile_app)

    MobileApp.objects.bulk_update(obj_to_update, ['package_version'], batch_size=2000)

def undo_force_semantic_version(apps, schema_editor):
    MobileApp = apps.get_model('tigaserver_app', 'MobileApp')

    obj_to_update = []
    for mobile_app in MobileApp.objects.filter(package_version__contains='legacy').iterator():
        mobile_app.package_version = str(Version.coerce(mobile_app.package_version).minor)
        obj_to_update.append(mobile_app)

    MobileApp.objects.bulk_update(obj_to_update, ['package_version'], batch_size=2000)

class Migration(migrations.Migration):

    dependencies = [
        ('tigaserver_app', '0083_europecountry_reports_can_be_published'),
    ]

    operations = [
        migrations.RunPython(force_semantic_version, undo_force_semantic_version),
        migrations.AlterField(
            model_name='mobileapp',
            name='package_version',
            field=semantic_version.django_fields.VersionField(coerce=False, max_length=32, partial=False, validators=[django.core.validators.RegexValidator(code='invalid_version', regex=re.compile('^(\\d+)\\.(\\d+)\\.(\\d+)(?:-([0-9a-zA-Z.-]+))?(?:\\+([0-9a-zA-Z.-]+))?$'))]),
        ),
    ]
