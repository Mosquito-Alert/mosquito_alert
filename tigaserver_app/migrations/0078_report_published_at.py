# Generated by Django 3.2.25 on 2025-03-18 15:54

from datetime import timedelta

from django.db import migrations, models

from django.contrib.contenttypes.models import ContentType

def populate_report_published_at(apps, schema_editor):
    Report = apps.get_model('tigaserver_app', 'Report')
    UUIDTaggedItem = apps.get_model('tigaserver_app', 'UUIDTaggedItem')
    ExpertReportAnnotation = apps.get_model('tigacrafting', 'ExpertReportAnnotation')
    IdentificationTask = apps.get_model('tigacrafting', 'IdentificationTask')

    from tigaserver_app.models import Report as ReportModel
    from tigacrafting.models import IdentificationTask as IdentificationTaskModel

    ReportContentType = ContentType.objects.get_for_model(Report)

    report_qs = Report.objects.filter(
        hide=False,
        deleted_at__isnull=True,
        published_at__isnull=True
    ).exclude(
        models.Exists(
            UUIDTaggedItem.objects.filter(
                object_id=models.OuterRef('pk'),
                content_type__pk=ReportContentType.pk,
                tag__name='345'
            )
        )
    )

    # Bite reports
    report_qs.filter(type=ReportModel.TYPE_BITE).update(
        published_at=models.F('server_upload_time') + timedelta(seconds=1)
    )

    # Breeding site reports
    report_qs.filter(type=ReportModel.TYPE_SITE).update(
        published_at=models.F('server_upload_time') + timedelta(days=2)
    )

    # Adult reports
    adult_report_qs = report_qs.filter(
        type=ReportModel.TYPE_ADULT,
        identification_task__is_safe=True,
        identification_task__status=IdentificationTaskModel.Status.DONE
    )
    
    # First: the reviewed by a supervisor
    adult_report_qs.filter(
        identification_task__reviewed_at__isnull=False
    ).update(
        published_at=models.Subquery(
            IdentificationTask.objects.filter(
                report=models.OuterRef('pk')
            ).values('reviewed_at')[:1]
        )
    )

    # Second: the directly marked as DONE becuase of executive annotation
    adult_report_qs.filter(
        identification_task__reviewed_at__isnull=True
    ).update(
        published_at=models.Subquery(
            ExpertReportAnnotation.objects.filter(
                identification_task=models.OuterRef('pk'),
                user__groups__name='expert',
                validation_complete=True,
                validation_complete_executive=True
            ).exclude(
                user__groups__name='superexpert'
            ).order_by('-last_modified').values('last_modified')[:1]
        )
    )

class Migration(migrations.Migration):

    dependencies = [
        ('tigaserver_app', '0077_indexing_for_refactor_queues'),
    ]

    operations = [
        migrations.AddField(
            model_name='historicalreport',
            name='published_at',
            field=models.DateTimeField(blank=True, editable=False, db_index=True, help_text='Datetime when the report was published.', null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='published_at',
            field=models.DateTimeField(blank=True, editable=False, db_index=True, help_text='Datetime when the report was published.', null=True),
        ),
        migrations.AddConstraint(
            model_name='report',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('published_at__isnull', False), _negated=True), ('hide', False), _connector='OR'), name='hide_when_published_at_is_not_null'),
        ),
        migrations.RunPython(populate_report_published_at, migrations.RunPython.noop),
    ]
