---

test_name: Create is not allowed for mobile users and non auth

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - endpoint
    - jwt_token_user
    - app_user_token

stages:
  - name: Create method not allowed for mobile users
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {app_user_token}"
      method: "POST"
    response:
      status_code: 403
  - name: Create method non authenticated users
    request:
      url: "{api_live_url}/{endpoint}/"
      method: "POST"
    response:
      status_code: 401
  - name: Create method authenticated users without permissions
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {jwt_token_user}"
      method: "POST"
    response:
      status_code: 403

---

test_name: Create method without best_photo

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - endpoint
    - identification_task
    - user
    - taxon_root
    - jwt_token_user_can_add

stages:
  - name: Create method without best_photo
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {jwt_token_user_can_add}"
      method: "POST"
      json:
        classification:
          taxon_id: !int "{taxon_root.pk}"
          confidence_label: 'definitely'
    response:
      status_code: 201
      json:
        id: !anyint
        observation_uuid: "{identification_task.report.pk}"
        user:
          uuid: !re_fullmatch "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          username: "{user.username}"
          first_name: "{user.first_name}"
          last_name: "{user.last_name}"
          full_name: "{user.first_name} {user.last_name}"
        best_photo: null
        classification:
          taxon:
            id: !int "{taxon_root.pk}"
            name: !anystr
            common_name: !anything
            rank: !anystr
            italicize: !anybool
          confidence: 1
          confidence_label: 'definitely'
          is_high_confidence: true
        feedback:
          public_note: null
          internal_note: null
          user_note: null
        type: !anystr
        is_flagged: false
        is_decisive: false
        observation_flags:
          is_favourite: false
          is_visible: true
        tags: !anylist
        created_at: !re_fullmatch \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}Z
        updated_at: !re_fullmatch \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}Z

---

test_name: Create method with best_photo

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - endpoint
    - identification_task
    - user
    - taxon_root
    - jwt_token_user_can_add

stages:
  - name: Create method with best_photo
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {jwt_token_user_can_add}"
      method: "POST"
      json:
        best_photo_uuid: "{identification_task.photo.uuid}"
        classification:
          taxon_id: !int "{taxon_root.pk}"
          confidence_label: 'definitely'
    response:
      status_code: 201
      json:
        id: !anyint
        observation_uuid: "{identification_task.report.pk}"
        user:
          uuid: !re_fullmatch "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          username: "{user.username}"
          first_name: "{user.first_name}"
          last_name: "{user.last_name}"
          full_name: "{user.first_name} {user.last_name}"
        best_photo:
          uuid: "{identification_task.photo.uuid}"
          url: !anystr
        classification:
          taxon:
            id: !int "{taxon_root.pk}"
            name: !anystr
            common_name: !anything
            rank: !anystr
            italicize: !anybool
          confidence: 1
          confidence_label: 'definitely'
          is_high_confidence: true
        feedback:
          public_note: null
          internal_note: null
          user_note: null
        type: !anystr
        is_flagged: false
        is_decisive: false
        observation_flags:
          is_favourite: false
          is_visible: true
        tags: !anylist
        created_at: !re_fullmatch \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}Z
        updated_at: !re_fullmatch \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{6}Z

---

test_name: Create off-topic classification

includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - endpoint
    - identification_task
    - user
    - taxon_root
    - jwt_token_user_can_add

stages:
  - name: Create off-topic classification
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {jwt_token_user_can_add}"
      method: "POST"
      json:
        classification: null
    response:
      status_code: 201
      strict:
        - json:off
      json:
        observation_uuid: "{identification_task.report.pk}"
        classification: null

---

test_name: User can create a new annotation when assignment exist


includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - endpoint
    - assigned_only_identification_task
    - assignment
    - user
    - taxon_root
    - jwt_token_user_can_add

stages:
  - name: Create off-topic classification
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {jwt_token_user_can_add}"
      method: "POST"
      json:
        classification: null
    response:
      status_code: 201
      strict:
        - json:off
      json:
        id: !int "{assignment.pk}"

---

test_name: User can create a new annotation if annotator


includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - endpoint
    - user_with_role_annotator
    - jwt_token_user
    - taxon_root
  - parametrize:
      key: is_decisive
      vals:
        - true
        - false

stages:
  - name: Create classification
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {jwt_token_user}"
      method: "POST"
      json:
        classification:
          taxon_id: !int "{taxon_root.pk}"
          confidence_label: 'definitely'
        is_decisive: "{is_decisive}"
    response:
      status_code: 201
      strict:
        - json:off
      json:
        is_decisive: false

---

test_name: User can create a new annotation if supervisor


includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - endpoint
    - user_with_role_supervisor_in_country
    - jwt_token_user
    - taxon_root
  - parametrize:
      key: is_decisive
      vals:
        - true
        - false

stages:
  - name: Create classification
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {jwt_token_user}"
      method: "POST"
      json:
        classification:
          taxon_id: !int "{taxon_root.pk}"
          confidence_label: 'definitely'
        is_decisive: "{is_decisive}"
    response:
      status_code: 201
      strict:
        - json:off
      json:
        is_decisive: !bool "{is_decisive}"

---

test_name: User can create a new annotation if reviewer


includes:
  - !include schema.yml

marks:
  - usefixtures:
    - api_live_url
    - endpoint
    - user_with_role_reviewer
    - jwt_token_user
    - taxon_root
  - parametrize:
      key: is_decisive
      vals:
        - true
        - false

stages:
  - name: Create classification
    request:
      url: "{api_live_url}/{endpoint}/"
      headers:
        Authorization: "Bearer {jwt_token_user}"
      method: "POST"
      json:
        classification:
          taxon_id: !int "{taxon_root.pk}"
          confidence_label: 'definitely'
        is_decisive: "{is_decisive}"
    response:
      status_code: 201
      strict:
        - json:off
      json:
        is_decisive: !bool "{is_decisive}"